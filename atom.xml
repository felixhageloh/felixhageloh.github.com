<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Traces Of]]></title>
  <link href="http://felixhageloh.github.io/atom.xml" rel="self"/>
  <link href="http://felixhageloh.github.io/"/>
  <updated>2014-08-26T09:27:50+02:00</updated>
  <id>http://felixhageloh.github.io/</id>
  <author>
    <name><![CDATA[Felix Hageloh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Background Filters for Übersicht]]></title>
    <link href="http://felixhageloh.github.io/blog/2014/08/25/background-filters-for-ubersicht/"/>
    <updated>2014-08-25T18:09:00+02:00</updated>
    <id>http://felixhageloh.github.io/blog/2014/08/25/background-filters-for-ubersicht</id>
    <content type="html"><![CDATA[<p>Today I want to reveal a ‘hidden’ feature of Übersicht that has been available since version 0.2. The reason for this secrecy is that it is in an early beta state and still somewhat cumbersome to use. However, the release of Mac OS X Yosemite is nigh and this will probably be a welcome addition to match the visual appearance of it. So I thought, better to get some people using it and get some feedback.</p>

<p>The hidden feature I am talking about is background filters. OS X Yosemite is full of them - most commonly blur filters. What they allow you to do is having beautiful translucent effects without sacrificing usability. Without filters, other content shining through translucent elements offers too many distractions. However, with the right filters you don’t so much see other content, but rather get the impression that the UI reacts to surrounding colors ever so slightly.</p>

<h3 id="get-your-blur-on">get your blur on</h3>

<p>So how would one recreate Yosemite’s filters in Übersicht? Of course <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/filter">CSS3 filters</a> have been available for use since the first release. The problem with CSS3 filters is that they can only be applied to a DOM element and not what’s <em>behind</em> a DOM element. To make matters worse, usually what’s behind Übersicht widgets is the desktop wallpaper, which is not even part of the same App, let alone the Übersicht DOM.</p>

<p>To work around this issue, I’ve created a way to choose a dedicated DOM element and make it display a slice of the desktop wallpaper. The slice is chosen so that it exactly matches what would normally behind said DOM element. To understand what I mean, lets dive straight into an example.</p>

<h3 id="setting-up">setting up</h3>

<p><img class="left" src="http://felixhageloh.github.io/images/uebersicht-filters/no-blur.png" width="360" height="225" /></p>

<p>The image to the left shows a simple widget with a translucent background and no filters applied. It has only a single DOM element that shows the widget content.
In order to get this widget ready for background filters we first need to create a more complex DOM structure:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="nv">render: </span><span class="nf">(output) -&gt;</span> <span class="s">&quot;&quot;&quot;</span>
</span><span class="line"><span class="s">  &lt;canvas class=&#39;bg-slice&#39;&gt;&lt;/canvas&gt;</span>
</span><span class="line"><span class="s">  &lt;div class=&#39;content&#39;&gt;</span><span class="si">#{</span><span class="nx">output</span><span class="si">}</span><span class="s">&lt;/div&gt;</span>
</span><span class="line"><span class="s">&quot;&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We’ve now created a <code>canvas</code> element which will later draw the wallpaper slice, and a content element which will hold the widget content and sits in front of the canvas element. Of course we need some CSS to make this work, which comes down to:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="css"><span class="line"><span class="nc">.content</span>
</span><span class="line">  <span class="nt">background</span><span class="o">:</span> <span class="nt">rgba</span><span class="o">(</span><span class="nf">#fff</span><span class="o">,</span> <span class="nt">0</span><span class="nc">.5</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="nc">.bg-slice</span>
</span><span class="line">  <span class="nt">position</span><span class="o">:</span> <span class="nt">absolute</span>
</span><span class="line">  <span class="nt">top</span><span class="o">:</span> <span class="nt">0</span>
</span><span class="line">  <span class="nt">left</span><span class="o">:</span> <span class="nt">0</span>
</span><span class="line">  <span class="nt">width</span><span class="o">:</span> <span class="nt">0</span>
</span><span class="line">  <span class="nt">height</span><span class="o">:</span> <span class="nt">0</span>
</span><span class="line">  <span class="nt">-webkit-filter</span><span class="o">:</span> <span class="nt">blur</span><span class="o">(</span><span class="nt">10px</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This applies the background color to the content element and makes the canvas span the entire widget, sitting behind the content. Note that using <code>width</code> and <code>height</code> is important or otherwise the canvas will have a default size 300xsomething pixels.</p>

<p>This code will make the widget look identical to the previous code: The canvas element is completely transparent so there is nothing to see and nothing to apply the blur filter to.</p>

<h3 id="drawing-the-background-slice">drawing the background slice</h3>

<p><img class="right" src="http://felixhageloh.github.io/images/uebersicht-filters/blur.png" width="360" height="225" /></p>

<p>To make the canvas draw a slice of the wallpaper we can use the the new <code>uebersicht.makeBgSlice</code> method. It expects a canvas element as an argument and will measure the elements size, ask the App for a wallpaper slice of that size and finally draw the slice. For it to be able to measure the canvas size, it needs to be called after rendering has happened. For this we can use the new <code>afterRender</code> property, which - as the name suggests - gets invoked after <code>render</code>. This gives us following code:
<br />
<br /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="nv">afterRender: </span><span class="nf">(domEl) -&gt;</span>
</span><span class="line">  <span class="nx">uebersicht</span><span class="p">.</span><span class="nx">makeBgSlice</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span> <span class="k">for</span> <span class="nx">el</span> <span class="k">in</span> <span class="nx">$</span><span class="p">(</span><span class="nx">domEl</span><span class="p">).</span><span class="nx">find</span> <span class="s">&#39;.bg-slice&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The result can be seen to the right. It looks pretty much what we are looking for, but keen observers will note that the background looks less blurred and more transparent towards the edges. This is a common problem with blur filters (for reasons I will not go into detail here) and corresponds to the blur radius we chose - 10px in this case.</p>

<h3 id="the-final-10px">the final 10px</h3>

<p>To get this just right we need to compensate for the 10px blur radius by growing the canvas element
10px in every direction. Luckily we have Stylus to aid us here; we can make the blur radius a variable and add it to the canvas size. The code and result are shown below:</p>

<p><img class="left" src="http://felixhageloh.github.io/images/uebersicht-filters/final.png" width="360" height="225" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="css"><span class="line"><span class="nt">bg-blur</span> <span class="o">=</span> <span class="nt">10px</span>
</span><span class="line">
</span><span class="line"><span class="nc">.bg-slice</span>
</span><span class="line">  <span class="nt">position</span><span class="o">:</span> <span class="nt">absolute</span>
</span><span class="line">  <span class="nt">top</span><span class="o">:</span> <span class="nt">-</span><span class="o">(</span><span class="nt">bg-blur</span><span class="o">)</span>
</span><span class="line">  <span class="nt">left</span><span class="o">:</span> <span class="nt">-</span><span class="o">(</span><span class="nt">bg-blur</span><span class="o">)</span>
</span><span class="line">  <span class="nt">width</span><span class="o">:</span> <span class="nt">100</span><span class="o">%</span> <span class="o">+</span> <span class="nt">2</span><span class="o">*</span><span class="nt">bg-blur</span>
</span><span class="line">  <span class="nt">height</span><span class="o">:</span> <span class="nt">100</span><span class="o">%</span> <span class="o">+</span> <span class="nt">2</span><span class="o">*</span><span class="nt">bg-blur</span>
</span><span class="line">  <span class="nt">-webkit-filter</span><span class="o">:</span> <span class="nt">blur</span><span class="o">(</span><span class="nt">bg-blur</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><br />
<br /></p>

<p>This looks very much what we are looking for already and this approach lets us easily play with different blur radii. Of course there are many other CSS3 filters available, so feel free to experiment!</p>

<p>The final, complete widget is <a href="https://gist.github.com/felixhageloh/4c54a2a69b5a08b9f644">available here</a>.</p>

<h3 id="caveats">caveats</h3>

<p>As you have probably noticed by now, getting this to work is a somewhat tedious process which could probably be streamlined. Some other issues remain, that might be harder to fix, though. You will notice a delay when switching to a desktop with a different wallpaper until all your filters display the new wallpaper image. Also you will notice a spike in CPU usage while the App processes the new wallpaper.</p>

<p>For these reasons, please be careful when using this feature and expect some changes in the future. In the meantime, happy styling and experimenting!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Übersicht 0.2]]></title>
    <link href="http://felixhageloh.github.io/blog/2014/07/03/uebersicht-0-dot-2/"/>
    <updated>2014-07-03T10:04:00+02:00</updated>
    <id>http://felixhageloh.github.io/blog/2014/07/03/uebersicht-0-dot-2</id>
    <content type="html"><![CDATA[<p>A new version of Übersicht has been released today, which brings a much requested feature: screen control. For those of you with multiple monitors, you can now select which monitor Übersicht runs on.</p>

<p><img class="left" src="http://felixhageloh.github.io/images/uebersicht-screen-control.png" /></p>

<p>It should also remember which monitor(s) you used last and use it again whenever it is available. Note that it doesn’t remember the exact monitor, but rather which port the monitor was connected to. So if you connect a different monitor to the same port, it should use that one.</p>

<p>The screen-shot to the left also shows another new feature: manual refresh. You can now force your widgets to refresh manually, which is handy when you just woke your machine from sleep and don’t want to wait for your widgets to update.</p>

<p>Finally, there also have been improvements to error reporting to aid you in writing your own widgets. CoffeeSCript and Stylus compile errors were previously only logged to the system log, but now they will appear in the developer console as well.</p>

<p>This is the first release that has seen some community involvement and I’d like to thank every one who helped out! Special thanks go to <a href="https://github.com/gboudreau">Guillaume Boudreau</a> and <a href="https://github.com/siemensikkema">Siemen Sikkema</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Übersicht]]></title>
    <link href="http://felixhageloh.github.io/blog/2014/04/22/ubersicht/"/>
    <updated>2014-04-22T13:26:00+02:00</updated>
    <id>http://felixhageloh.github.io/blog/2014/04/22/ubersicht</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://felixhageloh.github.io/images/uebersicht@2x.png" width="256" height="256" title="icon" /></p>

<p>Earlier today I released <a href="http://tracesof.net/uebersicht/">Übersicht</a>, a little Mac app I originally wrote to scratch my own itch. It is essentially like <a href="http://projects.tynsoe.org/en/geektool/">GeekTool</a>, which lets you run system commands and display their output on your desktop. The main difference that widgets are written in HTML5, which was originally motivated by these two main reasons:</p>

<ul>
  <li>I can plug in a different monitor without my widgets breaking</li>
  <li>I can easily write my own widgets</li>
</ul>

<p>So in essence the app is just a large WebView that is glued to your desktop and widgets are little snippets of HTML+CSS+JS. Of course you can’t run system commands from within a WebView, so the app comes with a NodeJs backend. For more details on that, you can checkout out the <a href="http://slides.com/felixhageloh/node-native">slides</a> for my talk at the local Amsterdam JavaScript Meetup.</p>

<p>Of course, also checkout the <a href="http://tracesof.net/uebersicht/">app itself</a>. It is released under the GPL license and the code can be found on <a href="https://github.com/felixhageloh/uebersicht">GitHub</a>!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Text Entry Woes for Mobile Web Apps]]></title>
    <link href="http://felixhageloh.github.io/blog/2013/05/21/text-entry-mobile/"/>
    <updated>2013-05-21T21:26:00+02:00</updated>
    <id>http://felixhageloh.github.io/blog/2013/05/21/text-entry-mobile</id>
    <content type="html"><![CDATA[<p>Sometimes building web apps feels like trying to build a house of cards while the browser might pull away the carpet from underneath you at any moment. Text entry on mobile is one of these issues were you, as a developer, have very little control over what you want to achieve versus what the browser thinks it is best for you.</p>

<p>Mobile browsers have a reason for this of course. When the mobile web came about, websites and web apps where not designed with a small screen and a software keyboard in mind. In order to still provide a decent experience when entering text, mobile browsers had to come up with some solutions. For Mobile Safari that solution was to overlay the soft keyboard on top of the page and scroll the page so that the focused text field is in center of the visible space above the keyboard.</p>

<h3 id="dont-push-me-cause-">dont push me, ‘cause …</h3>

<p>While this works great on normal websites, in your carefully crafted web app you might run into something like this:</p>

<p><img class="left" src="http://felixhageloh.github.io/images/mobile_safari_form_good_cut.png" width="320" height="380" title=":)" />
<img src="http://felixhageloh.github.io/images/mobile_safari_form_borked_cut.png" width="320" height="380" title=":(" /></p>

<p>This might not seem like a big deal at the first glance, but when trying to create a seamless, near-native user experience, this can ruin your day. Submit buttons and other form elements that were carefully placed to be visible and easily reachable when entering text are now scrolled halfway off the screen. In combination with the unexpected movement it really makes the app feel broken.</p>

<h3 id="windowscrollto-to-the-rescue">window.scrollTo to the rescue</h3>

<p>So what can we do about this. There is, to my knowledge, no clean work around. A lot of default behaviour of the browser can be tweaked using css, some kind of <tt>event.preventDefault()</tt> or by other means, but this isn’t one of them. What we <em>can</em> do, however, is to reset the scroll offset using javascript (or coffeescript in this case), so something like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">$</span><span class="p">(</span><span class="nx">textareaEl</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;focus&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nb">window</span><span class="p">.</span><span class="nx">scrollTo</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>This is assuming that your web app takes the whole screen space and hides the address bar. However, it doesn’t quite work; the browser scrolls just slightly after the focus event fires, so the page scrolls anyway. Using a <tt>setTimeout</tt> works, but you rely on a magic number, plus it is hard to catch it exactly when it scrolls, so that there is a visible jump happening before the text field moves back in its correct position.</p>

<h3 id="hard-to-catch">hard to catch</h3>

<p>It turns out, that if you focus the text field programatically, there is no delay before the page scrolls, so the <tt>onfocus</tt> handler catches it just in time.</p>

<p>So the final solution boils down to:</p>

<ul>
  <li>stop the browser from focusing the textfield when the user taps it.</li>
  <li>focus the text field programatically.</li>
  <li>scroll window back to top when the focus event fires.</li>
</ul>

<p>I need to emphasise that this is <em>only</em> a valid solution if your are dealing with a full-on web app, which is sized to fit the screen and is not user scalable. <strong>Double tap zoom, or pinch zoom will break</strong> with this approach (just on the text field, not the entire site)!</p>

<h3 id="bolting-the-carpet-to-the-floor">bolting the carpet to the floor</h3>

<p>In order to stop the browser from focusing the text field we need to <tt>preventDefault</tt> on touchstart (touchend should work as well). This means we have to provide our own custom tap handler, since the default click behaviour won’t get triggered. The final solution could look something like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// onClick is our custom click/tap handler</span>
</span><span class="line"><span class="nx">onClick</span><span class="p">(</span><span class="nx">myTextarea</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">$</span><span class="p">(</span><span class="nx">myTextarea</span><span class="p">).</span><span class="nx">focus</span><span class="p">()</span> <span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="c1">// scroll back to top</span>
</span><span class="line"><span class="nx">$</span><span class="p">(</span><span class="nx">myTextarea</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;focus&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nb">window</span><span class="p">.</span><span class="nx">scrollTo</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The custom click handler could look something like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>onClick</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">onClick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">domEl</span><span class="p">,</span> <span class="nx">clickHandler</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">domEl</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">domEl</span><span class="p">);</span> <span class="c1">// make sure we have a query object</span>
</span><span class="line">
</span><span class="line">    <span class="kd">var</span> <span class="nx">startTime</span><span class="p">,</span> <span class="nx">startPos</span><span class="p">,</span> <span class="nx">canceled</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="nx">domEl</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;touchstart&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">         <span class="c1">// this prevents the browser from firing a click event and</span>
</span><span class="line">         <span class="c1">// focusing the text field</span>
</span><span class="line">        <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">        <span class="nx">canceled</span>  <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class="line">        <span class="nx">startTime</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">timeStamp</span><span class="p">;</span>
</span><span class="line">        <span class="nx">startPos</span>  <span class="o">=</span> <span class="p">{</span> <span class="nx">x</span><span class="o">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">pageX</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">pageY</span> <span class="p">};</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line">
</span><span class="line">    <span class="nx">domEl</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;touchmove&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="kd">var</span> <span class="nx">dx</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">pageX</span> <span class="o">-</span> <span class="nx">startPos</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span>
</span><span class="line">            <span class="nx">dy</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">pageY</span> <span class="o">-</span> <span class="nx">startPos</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// cancel click if finger moved more than 40px</span>
</span><span class="line">        <span class="kd">var</span> <span class="nx">distance</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="nx">dx</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="nx">dy</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span>
</span><span class="line">        <span class="nx">canceled</span>     <span class="o">=</span> <span class="nx">canceled</span> <span class="o">||</span> <span class="nx">distance</span> <span class="o">&gt;</span> <span class="mi">40</span><span class="p">;</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line">
</span><span class="line">    <span class="nx">domEl</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;touchend&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">if</span><span class="p">(</span><span class="nx">canceled</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// don&#39;t trigger click if finger rested longer than 500ms</span>
</span><span class="line">        <span class="k">if</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">timeStamp</span> <span class="o">-</span> <span class="nx">startTime</span> <span class="o">&lt;</span> <span class="mi">500</span><span class="p">)</span>
</span><span class="line">            <span class="nx">clickHandler</span><span class="p">();</span>
</span><span class="line">    <span class="p">})</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And there you have it; the text field stays in place, solid as a rock. We’ve bolted the carpet to the floor and can now happily continue to build our house of cards.</p>

<p>Mind you, this solution is for iOS only, so on Android or other mobile platforms/browsers it won’t work and even break things. There are other solutions for these platforms, which I won’t go into further detail here.</p>

<p>Finally, do remember that you are breaking default browser behaviour, which exists for a reason. So know what you are doing or else you might significantly reduce the usability of your app! Having a textfield stay hidden behind the soft keyboard, or preventing other necessary user interaction is hardly ever very user friendly ;).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Blog]]></title>
    <link href="http://felixhageloh.github.io/blog/2013/05/18/new-blog/"/>
    <updated>2013-05-18T11:30:00+02:00</updated>
    <id>http://felixhageloh.github.io/blog/2013/05/18/new-blog</id>
    <content type="html"><![CDATA[<h2 id="here-is-to-a-fresh-start">Here is to a fresh start!</h2>

<p>Since posterous shut down I had to migrate my not-so-active blog, but wasn’t successful with importing all my old posts so far. Many of them are probably not worth the trouble. I do hope to move over the more interesting posts some time soon, though!</p>

<p><em>Stay tuned!</em></p>
]]></content>
  </entry>
  
</feed>
